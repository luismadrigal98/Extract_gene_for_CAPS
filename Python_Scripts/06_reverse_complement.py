"""
This program will be used to reverse complement a DNA sequence. The input is the line for which the sequence must be reversed complemented, and the fasta
file generated by the previous script. The output will be the reverse complemented sequence in place.

"""

import argparse
import os
import tempfile
import shutil

parser = argparse.ArgumentParser(description = "Reverse complement DNA sequence")

parser.add_argument("-s", "--sequence", help="DNA sequence to reverse complement", required=True)
parser.add_argument("-f", "--fasta", help="Fasta file with the gene sequence", required=True)

def reverse_complement(seq):
    complement = {'A': 'T', 'T': 'A', 'C': 'G', 'G': 'C'}
    return ''.join([complement[base] for base in reversed(seq)])

def main():
    args = parser.parse_args()

    seq = args.sequence
    fasta = args.fasta
    sequence_modified = False

    # Create a temporary file
    temp_fd, temp_path = tempfile.mkstemp()
    with os.fdopen(temp_fd, 'w') as temp_file, open(fasta, "r") as f:
        sequence_found = False
        for line in f:
            if line.startswith(">"):
                family_name = line.strip().lstrip(">")
                temp_file.write(line)
                if family_name == seq:
                    sequence_found = True
                else:
                    sequence_found = False
            elif sequence_found:
                original_sequence = line.strip()
                reversed_complement = reverse_complement(original_sequence)
                temp_file.write(reversed_complement + "\n")
                sequence_modified = True
                sequence_found = False  # Reset for the next sequence
            else:
                temp_file.write(line)

    # Replace the original file with the modified version if a modification was made
    if sequence_modified:
        shutil.copy(temp_path, fasta)  # Copy the content of the temp file to the original file
        os.remove(temp_path)  # Remove the temporary file
    else:
        os.remove(temp_path)  # Remove the temporary file if no modification was made

if __name__ == "__main__":
    main()