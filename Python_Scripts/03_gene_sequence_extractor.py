"""
This script is designed to extract gene sequences from a reference FASTA file. It requires two inputs:
1. The name of the gene of interest.
2. A TSV or CSV file that was generated by the script `02_gene_screener_by_length.py`.

This utility is particularly useful in genomics research where specific gene sequences need to be isolated from
larger genomic datasets for further analysis.

Author: Luis J. Madrigal Roca
Date: 2024-07-14
"""

import argparse

def process_fasta(fasta_lines):
    """
    Process a list of FASTA file lines, merging sequence lines that belong to the same header.
    """
    processed_lines = []
    current_sequence = ""
    
    for line in fasta_lines:
        if line.startswith(">"):
            if current_sequence:  # If there's a sequence accumulated, append it before starting a new one
                processed_lines.append(current_sequence)
                current_sequence = ""
            processed_lines.append(line)  # Append the new header
        else:
            current_sequence += line.strip()  # Accumulate sequence lines
    if current_sequence:  # Don't forget to append the last sequence
        processed_lines.append(current_sequence)
    
    return processed_lines

def seq_extractor(gene_start, gene_end, chromosome, fasta):
    """
    Given a chromosome number and the position of the gene of interest, extract the gene sequence from the reference fasta file.
    """
    gene_sequence = ""
    found_chromosome = False  # Flag to indicate when the correct chromosome has been found

    for line in fasta:
        if found_chromosome:  # If the chromosome was found in the previous iteration, this line is the sequence
            gene_sequence = line[gene_start-1:gene_end]  # Extract the gene sequence using the provided start and end
            break  # Exit the loop after capturing the sequence
        if line.startswith(f">{chromosome}"):
            found_chromosome = True  # Set the flag to True when the correct chromosome header is found

    return gene_sequence

def main():

    parser = argparse.ArgumentParser(description = "Gene sequence extractor")

    parser.add_argument("-i", "--input", help = "Gene of interest or input file. Input file is a plain text (.txt) where each gene name is listed in individuals lines", required = True)
    parser.add_argument("-gd", "--gene_dictionary", help = "tsv or csv file with the gene names and the positions", required = True)
    parser.add_argument("-ch", "--chromosome", help = "Chormosome where the gene is located", required = True, type=str)
    parser.add_argument("-f", "--fasta", help = "Reference fasta file", required = True)
    parser.add_argument("-s", "--sep", help = "Separator. Only ',' or '\t' currently admitted.", default = ",")
    parser.add_argument("-on", "--output_name", help = "Name of the output fasta file. You do not need to include the extension.", default = "all_genes_sequences")

    args = parser.parse_args()

    chr = args.chromosome

    if not ("csv" in args.gene_dictionary or "tsv" in args.gene_dictionary):
        print("Invalid input file format. Please use a csv or tsv file.")
        raise SystemExit

    if not ("fasta" in args.fasta or "fa" in args.fasta):
        print("Invalid reference fasta file format. Please use a fasta file.")
        raise SystemExit

    # Read the input file
    if "txt" in args.input:
        with open(args.input, "r") as f:
            goi = f.read().splitlines() # Genes of interest
    else:
        goi = args.input # Gene of interest

    # Read the reference fasta file

    with open(args.fasta, "r") as f:
        fasta = f.read().splitlines()
    
    # Process the fasta file
    processed_fasta = process_fasta(fasta)

    # Extract the gene sequence
    gene_sequence = {}
    
    for gene in goi:
        with open(args.gene_dictionary, "r") as f:
            gene_dict = f.read().splitlines()
            for line in gene_dict:
                if args.sep in line:
                    _, _, gene_name, gene_start, gene_end, _ = line.split(args.sep)
                else:
                    _, _, gene_name, gene_start, gene_end, _ = line.split("\t")
                if gene == gene_name:
                    gene_sequence[gene] = seq_extractor(int(gene_start), int(gene_end), chr, processed_fasta)

    # Write the gene sequence to a file
    with open(f"{args.output_name}.fasta", "w") as f:
        for gene, sequence in gene_sequence.items():
            f.write(f">{gene}\n{sequence}\n")

if __name__ == "__main__":
    main()